% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tax_info_pq.R
\name{tax_info_pq}
\alias{tax_info_pq}
\title{Get information from a custom csv file using taxonomic names present in a
phyloseq object}
\usage{
tax_info_pq(
  physeq,
  taxonomic_rank = "currentCanonicalSimple",
  file_name = NULL,
  csv_taxonomic_rank = NULL,
  add_to_phyloseq = FALSE,
  col_prefix = NULL,
  use_duck_db = FALSE,
  csv_cols_select = NULL,
  sep = ",",
  dec = "."
)
}
\arguments{
\item{physeq}{(required) A phyloseq object}

\item{taxonomic_rank}{(Character, default "currentCanonicalSimple")
The column(s) present in the @tax_table slot of the phyloseq object. Can
be a vector of two columns (e.g. c("Genus", "Species")).}

\item{file_name}{(required) A file path to your csv file.}

\item{csv_taxonomic_rank}{(required) The name of the column in your csv file
containing the taxonomic names. Must match the taxonomic_rank of the phyloseq. #' @param add_to_phyloseq (logical, default FALSE)
 If TRUE, return a new phyloseq object with new columns in the tax_table slot}

\item{add_to_phyloseq}{(logical, default FALSE) If TRUE, add new column(s)
in the tax_table of the phyloseq object.}

\item{col_prefix}{A character string to be added as a prefix to the new
columns names added to the tax_table slot of the phyloseq object.}

\item{use_duck_db}{(logical, default FALSE) If TRUE, use duckdb to handle
the join between the csv file and the tax_table of the phyloseq object.
Useful for large csv files.}

\item{csv_cols_select}{A character vector of the column names to select in the csv file.}

\item{sep}{the field separator character. See [utils::read.csv()].}

\item{dec}{the field separator character. See [utils::read.csv()].}
}
\value{
Either a tibble (if add_to_phyloseq = FALSE) or a new phyloseq
object, if add_to_phyloseq = TRUE, with new column(s) in the tax_table.
}
\description{
A function to add information from a custom csv file (e.g. FungalTraits,
 Taxref, ...) to the tax_table slot of a phyloseq object by joining
 taxonomic names from phyloseq object (column `taxonomic_rank`) with a
 column of the csv file (`csv_taxonomic_rank`) containing the correspondant
 taxonomic names. Be carefull that the taxonomic names in the csv file must
 match exactly the taxonomic names in the phyloseq object. For example, if
 the taxonomic names in the phyloseq object are in the form "Genus species"
 the taxonomic names in the csv file must be in the same form
 (not "Genus_species" or "Genus Species Author"...).

 Note that the csv file need to be in a wide-format, i.e. one line for each
 distinct value in the `csv_taxonomic_rank` columns. You may want to transform
 your data.frame using [tidyr::pivot_wider()] fonctions prior to write it in
 a new file.
}
\examples{

data_fungi_cleanNames <- gna_verifier_pq(data_fungi,
  data_sources = 210,
  add_to_phyloseq = TRUE
)

# FUNGAL TRAITS example
# --------------------
fungal_traits <- "/home/adrien/Nextcloud/IdEst/Projets/MITIS/FUNGAL_TRAITS/FUNGAL_TRAITS_DB.csv" # TODO put in package
# fungal_traits <- system.file("extdata", "FungalTraits.csv", package = "MiscMetabar")
fg_traits <- tax_info_pq(data_fungi_cleanNames,
  taxonomic_rank = "currentCanonicalSimpleGenus",
  file_name = fungal_traits,
  csv_taxonomic_rank = "GENUS",
  col_prefix = "ft_",
  sep = ";"
)

table(fg_traits$ft_Ectomycorrhiza_exploration_type_template, useNA = "ifany")
table(fg_traits$ft_primary_lifestyle, fg_traits$Guild) |>
  as.data.frame() |>
  filter(Freq > 0) |>
  arrange(desc(Freq)) |>
  head()

# TAXREF example
# --------------------
TAXREFv18 <- "/home/adrien/Nextcloud/IdEst/Projets/MITIS/TAXREF_v18_2025/TAXREFv18.csv" # TODO put in package
# TAXREFv18 <- system.file("extdata", "TAXREFv18.csv", package = "MiscMetabar")

res_with_R <- tax_info_pq(data_fungi_cleanNames,
  file_name = TAXREFv18,
  csv_taxonomic_rank = "NOM_VALIDE_SIMPLE",
  col_prefix = "taxref_"
)
res_with_duckDB <- tax_info_pq(
  data_fungi_cleanNames,
  file_name = TAXREFv18,
  csv_taxonomic_rank = "NOM_VALIDE_SIMPLE",
  use_duck_db = TRUE,
  col_prefix = "taxref_",
  csv_cols_select = c("RANG", "HABITAT", "FR", "GF", "MAR", "GUA", "SM", "SB", "SPM", "MAY", "EPA", "REU", "SA", "TA", "TAAF", "PF", "NC", "WF", "CLI", "URL")
)

data_fungi_cleanNames_2 <- tax_info_pq(
  data_fungi_cleanNames,
  file_name = TAXREFv18,
  csv_taxonomic_rank = "NOM_VALIDE_SIMPLE",
  use_duck_db = TRUE,
  col_prefix = "taxref_",
  csv_cols_select = c("RANG", "HABITAT", "FR", "URL", "CD_REF"),
  add_to_phyloseq = TRUE
)
table(data_fungi_cleanNames_2@tax_table[, "taxref_FR"])
table(data_fungi_cleanNames_2@tax_table[, "taxref_HABITAT"])

# TAXREF example (continue with status)
# --------------------
taxref_status <- "/home/adrien/Nextcloud/IdEst/Projets/MITIS/BDC_18/bdc_18_01_wider.csv" # TODO put in package
data_fungi_cleanNames_3 <- tax_info_pq(data_fungi_cleanNames_2,
  taxonomic_rank = "taxref_CD_REF",
  file_name = taxref_status,
  csv_taxonomic_rank = "CD_REF",
  col_prefix = "st_",
  use_duck_db = TRUE,
  add_to_phyloseq = TRUE
)

data_fungi_cleanNames_3@tax_table[, "st_BCD_LRR"] |>
  table(useNA = "always")
data_fungi_cleanNames_3@tax_table[, "st_BCD_ZDET"] |>
  table(useNA = "always")
data_fungi_cleanNames_3@tax_table[, "st_BCD_TAXREF_STATUT_BIOGEO"] |>
  table(useNA = "always")
}
\author{
Adrien Taudi√®re
}
